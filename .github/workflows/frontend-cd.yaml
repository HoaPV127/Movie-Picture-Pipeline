name: Frontend Continuous Deployment

on:
  pull_request:
    branches:
      - main
    types: [opened]
    # paths:
    #   - '**.js'

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint Job

    defaults:
      run:
        working-directory: starter/frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Dependencies
        run: npm install

      - name: Run Lint
        run: npm run lint

  test:
    runs-on: ubuntu-latest
    name: Test Job

    defaults:
      run:
        working-directory: starter/frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm run test

  build:
    runs-on: ubuntu-latest
    name: Build & Push & Deploy Job
    needs: [lint, test]

    defaults:
      run:
        working-directory: starter/frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install Dependencies
        run: npm install

      - name: Build Application with Docker
        env:
          REACT_APP_MOVIE_API_URL: http://localhost:5000
        run: |
          docker build --tag=frontend:latest .
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker Image to Amazon ECR
        run: |
          docker tag frontend:latest 346526321261.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest &&\
          docker push 346526321261.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest
      
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      
      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name project4-cluster

      - name: Deploy to EKS
        run: |
          kubectl set image deployment/frontend frontend=346526321261.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest
